-- File generated by the BNF Converter (bnfc 2.9.5).

-- | Program to test parser.
{-# OPTIONS_GHC -Wno-unused-imports #-}

module Main (main) where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import Language.Sprite.Syntax.Abs   ()
import Language.Sprite.Syntax.Lex   ( Token )
import Language.Sprite.Syntax.Par   ( myLexer, pTerm)
import Language.Sprite.Syntax.Print ( Print, printTree )
import Text.Pretty.Simple (pPrint)
import qualified Language.Sprite.Naive.Run as S

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> FilePath -> IO ()
runFile v f = putStrLn f >> readFile f >>= run f v

run :: FilePath -> Verbosity -> String -> IO ()
run f v s =
  case pTerm ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      -- mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
      showTree v tree
      putStrV v $ "\n[Type check result]\n\n"
      S.run f tree

  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree
  -- putStrV v $ "\n[Abstract Syntax]\n\n"
  -- pPrint tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    "-s":fs    -> mapM_ (runFile 0) fs
    fs         -> mapM_ (runFile 2) fs
