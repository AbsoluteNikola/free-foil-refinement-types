
token VarIdent lower (letter | digit | '_')* ;

-- expr terms
ConstInt.     Term ::= Integer ;
Boolean.      Term ::= ConstBool ;
Var.          Term ::= VarIdent ;
If.           Term ::= "if" "(" Term ")" "{" Term "}" "else" "{" Term "}";
Let.          Term ::= "let" Pattern "=" Term ";" ScopedTerm ;  -- FIXME: requires fix in Template Haskell (mkFreeFoil)
LetRec.       Term ::= "/*@" Term "*/" "let" "rec" Pattern "=" ScopedTerm ";" ScopedTerm ;  -- FIXME: requires fix in Template Haskell (mkFreeFoil)
Fun.          Term ::= "(" Pattern ")" "=>" "{" ScopedTerm "}" ;
App.          Term ::= Term "(" Term ")" ;
Ann.          Term ::= "/*@" Term "*/" Term; -- FIXME: Problem with TH generations when "/*@" Pattern : Term "*/" Term;
OpExpr.       Term ::= "(" Term Op Term ")";

-- polymorphism
TAbs.         Term ::= "/\\" Pattern ":" ScopedTerm ;
TApp.         Term ::= Term "t(" Term ")" ;

-- type terms, first term should be one of base types
TypeRefined.         Term ::= Term "[" Pattern "|" ScopedTerm "]" ;
TypeRefinedUnknown.  Term ::= Term "[" "?" "]" ;
TypeFun.             Term ::= Pattern ":" Term "=>" ScopedTerm ;
TypeForall.          Term ::= "âˆ€" Pattern ":" ScopedTerm ;

-- predicate terms
ConstTrue.      ConstBool ::= "true" ;
ConstFalse.     ConstBool ::= "false" ;

-- Horn Variables managed separately
HVar.  Term ::= VarIdent "(" [Term] ")" ;

EqOp.            Op ::= "==";
LessOrEqOp.      Op ::= "<=";
LessOp.          Op ::= "<";
GreaterOrEqOp.   Op ::= ">=";
GreaterOp.       Op ::= ">";
PlusOp.          Op ::= "+";
MinusOp.         Op ::= "-";
MultiplyOp.      Op ::= "*";
AndOp.           Op ::= "&&";
OrOp.            Op ::= "||";

PatternVar. Pattern ::= VarIdent ;
ScopedTerm. ScopedTerm ::= Term ;

-- base types
BaseTypeInt.      Term ::= "int" ;
BaseTypeBool.     Term ::= "bool" ;
BaseTypeVar.      Term ::= "'" Term; -- should be Var

-- used only on elaboration phase to infer types.
-- Should not appear on refinement check phase
BaseTypeTempVar.  Term ::= "''" VarIdent;

separator nonempty Term " " ;
