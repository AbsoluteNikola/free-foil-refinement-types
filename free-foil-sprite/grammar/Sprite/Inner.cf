
token VarIdent lower (letter | digit | '_')* ;

-- expr terms
ConstInt.     Term ::= Integer ;
Boolean.       Term ::= ConstBool ;
Var.          Term ::= VarIdent ;
Let.          Term ::= "let" Pattern "=" Term ";" ScopedTerm ;  -- FIXME: requires fix in Template Haskell (mkFreeFoil)
Fun.          Term ::= "(" Pattern ")" "=>" "{" ScopedTerm "}" ;
App.          Term ::= Term "(" Term ")" ;
Ann.          Term ::= "/*@" Term "*/" Term; -- FIXME: Problem with TH generations when "/*@" Pattern : Term "*/" Term;
OpExpr.       Term ::= "(" Term Op Term ")";
-- type terms
TypeRefined.  Term ::= BaseType "[" Pattern "|" ScopedTerm "]" ;
TypeFun.      Term ::= Pattern ":" Term "=>" ScopedTerm ;   -- FIXME: same problem as with Let
-- predicate terms
ConstTrue.      ConstBool ::= "true" ;
ConstFalse.     ConstBool ::= "false" ;

EqOp.            Op ::= "==";
LessOrEqOp.      Op ::= "<=";
LessOp.          Op ::= "<";
GreaterOrEqOp.   Op ::= ">=";
GreaterOp.       Op ::= ">";
PlusOp.          Op ::= "+";
MinusOp.         Op ::= "-";
MultiplyOp.      Op ::= "*";

PatternVar. Pattern ::= VarIdent ;
ScopedTerm. ScopedTerm ::= Term ;

BaseTypeInt.  BaseType ::= "int" ;
BaseTypeBool.  BaseType ::= "bool" ;

VarBinding. VarBinding ::= VarIdent ":" Term ;
separator nonempty VarBinding ";" ;
