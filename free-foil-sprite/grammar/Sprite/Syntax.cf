
token VarIdent lower (letter | digit | '_')* ;

-- expr terms
ConstInt.     Term ::= Integer ;
Var.          Term ::= VarIdent ;
Let.          Term ::= Decl ScopedTerm ;  -- FIXME: requires fix in Template Haskell (mkFreeFoil)
Fun.          Term ::= "(" VarIdent ")" "=>" "{" ScopedTerm "}" ;
App.          Term ::= Term "(" Term ")";
Op.           Term ::= Term IntOp Term;
_.            Term ::= "(" Term ")";

Annotation.          Annotation ::= "/*@" "val" VarIdent ":" RType "*/";

PlainDecl.  PlainDecl ::= "let" VarIdent "=" Term ";";

AnnotatedDecl.         Decl ::= Annotation PlainDecl;
UnAnnotatedDecl.       Decl ::= PlainDecl;
separator Decl "";

IntPlus. IntOp ::= "+";
IntMinus. IntOp ::= "-";
IntMultiply. IntOp ::= "*";

-- type terms
TypeRefined.      RType ::= BaseType "[" VarIdent "|" Pred "]" ;
TypeRefinedBase.  RType ::= BaseType;
TypeFun.          RType ::= FuncArg "=>" ScopedRType ;   -- FIXME: same problem as with Let
_.                RType ::= "(" RType ")";
ScopedRType.      ScopedRType ::= RType;

UnNamedFuncArg. FuncArg ::= RType;
NamedFuncArg.   FuncArg ::= VarIdent ":" RType;

-- predicates
PVar.           Pred ::= VarIdent;
PTrue.          Pred ::= "true" ;
PFalse.         Pred ::= "false" ;
PInt.           Pred ::= Integer ;
PEq.            Pred ::= Pred "==" Pred ;
PLessThan.      Pred ::= Pred "<" Pred ;
PLessOrEqThan.  Pred ::= Pred "<=" Pred ;
PPlus.          Pred ::= Pred "+" Pred ;
PMinus.         Pred ::= Pred "-" Pred ;
PMultiply.      Pred ::= Pred "*" Pred ;

PatternVar. Pattern ::= VarIdent ;
ScopedTerm. ScopedTerm ::= Term ;


BaseTypeInt.  BaseType ::= "int" ;

-- FunArgName. FunArgName ::= VarIdent;
-- separator nonempty FunArgsName "," ;

-- ArgList. ArgList ::= Term ;
-- separator nonempty ArgList "," ;

entrypoints Term;
