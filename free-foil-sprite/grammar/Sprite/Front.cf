
token VarIdent lower (letter | digit | '_')* ;

-- Program

Program. Program ::= [Qualifier] Term;

entrypoints Program;

-- qualifiers

Qualifier. Qualifier ::= "/**@ qualif" VarIdent "(" [QualifierArg] ")" ":" "(" Pred ")" "*/";
separator Qualifier "";

QualifierArg. QualifierArg ::= VarIdent ":" BaseType;
separator nonempty QualifierArg "," ;

-- expr terms
ConstInt.     Term ::= Integer ;
Bool.         Term ::= ConstBool ;
Var.          Term ::= VarIdent ;
If.           Term ::= "if" "(" FuncAppArg ")" "{" Term "}" "else" "{" Term "}";
Let.          Term ::= Decl Term ;
Fun.          Term ::= "(" VarIdent ")" "=>" "{" Term "}" ;
App.          Term ::= VarIdent "(" FuncAppArg ")"; -- Program should be in ANF. See page 14
Op.           Term ::= FuncAppArg IntOp FuncAppArg; -- Program should be in ANF. See page 14
_.            Term ::= "(" Term ")";

ConstTrue.    ConstBool ::= "true";
ConstFalse.   ConstBool ::= "false";

Annotation.          Annotation ::= "/*@" "val" VarIdent ":" RType "*/";

RecDecl.               Decl ::= Annotation "let" "rec" VarIdent "=" Term ";";
AnnotatedDecl.         Decl ::= Annotation "let" VarIdent "=" Term ";";
UnAnnotatedDecl.       Decl ::= "let" VarIdent "=" Term ";";

IntPlus. IntOp ::= "+";
IntMinus. IntOp ::= "-";
IntMultiply. IntOp ::= "*";
IntEq. IntOp ::= "==";
IntLessThan. IntOp ::= "<";
IntLessOrEqThan. IntOp ::= "<=";
IntGreaterThan. IntOp ::= ">";
IntGreaterOrEqThan. IntOp ::= ">=";

-- type terms
-- TODO: rewrite to move type var to base type
TypeRefined.         RType2 ::= BaseType "[" VarIdent "|" Pred "]" ;
TypeRefinedUnknown.  RType2 ::= BaseType "[" "?" "]" ;
TypeRefinedSimple.   RType3 ::= BaseType;
TypeVar.             RType2 ::= "'" VarIdent;
TypeFun.             RType1 ::= FuncArg "=>" RType2 ;

coercions RType 3;

NamedFuncArg.   FuncArg ::= VarIdent ":" RType;
UnNamedFuncArg. FuncArg ::= "_" ":" RType;

-- predicates
PVar.               Pred6 ::= VarIdent;
PBool.              Pred6 ::= ConstBool ;
PInt.               Pred6 ::= Integer ;
POr.                Pred1 ::= Pred1 "||" Pred2;
PAnd.               Pred2 ::= Pred2 "&&" Pred3;
PEq.                Pred3 ::= Pred3 "==" Pred4 ;
PLessThan.          Pred4 ::= Pred4 "<" Pred5 ;
PLessOrEqThan.      Pred4 ::= Pred4 "<=" Pred5 ;
PGreaterThan.       Pred4 ::= Pred4 ">" Pred5 ;
PGreaterOrEqThan.   Pred4 ::= Pred4 ">=" Pred5 ;
PPlus.              Pred5 ::= Pred5 "+" Pred6 ;
PMinus.             Pred5 ::= Pred5 "-" Pred6 ;
PMultiply.          Pred5 ::= Pred5 "*" Pred6 ;

coercions Pred 6 ;

BaseTypeInt.  BaseType ::= "int" ;
BaseTypeBool.  BaseType ::= "bool" ;

-- FunArgName. FunArgName ::= VarIdent;
-- separator nonempty FunArgsName "," ;
-- ArgList. ArgList ::= Term ;
-- separator nonempty ArgList "," ;

FuncAppArgBool. FuncAppArg ::= ConstBool;
FuncAppArgInt. FuncAppArg ::= Integer;
FuncAppArgVar. FuncAppArg ::= VarIdent;
