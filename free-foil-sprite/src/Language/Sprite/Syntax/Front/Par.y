-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.Sprite.Syntax.Front.Par
  ( happyError
  , myLexer
  , pTerm
  ) where

import Prelude

import qualified Language.Sprite.Syntax.Front.Abs
import Language.Sprite.Syntax.Front.Lex

}

%name pTerm Term
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('        { PT _ (TS _ 1)        }
  ')'        { PT _ (TS _ 2)        }
  '*'        { PT _ (TS _ 3)        }
  '*/'       { PT _ (TS _ 4)        }
  '+'        { PT _ (TS _ 5)        }
  '-'        { PT _ (TS _ 6)        }
  '/*@'      { PT _ (TS _ 7)        }
  ':'        { PT _ (TS _ 8)        }
  ';'        { PT _ (TS _ 9)        }
  '<'        { PT _ (TS _ 10)       }
  '<='       { PT _ (TS _ 11)       }
  '='        { PT _ (TS _ 12)       }
  '=='       { PT _ (TS _ 13)       }
  '=>'       { PT _ (TS _ 14)       }
  '>'        { PT _ (TS _ 15)       }
  '>='       { PT _ (TS _ 16)       }
  '['        { PT _ (TS _ 17)       }
  ']'        { PT _ (TS _ 18)       }
  'bool'     { PT _ (TS _ 19)       }
  'false'    { PT _ (TS _ 20)       }
  'int'      { PT _ (TS _ 21)       }
  'let'      { PT _ (TS _ 22)       }
  'true'     { PT _ (TS _ 23)       }
  'val'      { PT _ (TS _ 24)       }
  '{'        { PT _ (TS _ 25)       }
  '|'        { PT _ (TS _ 26)       }
  '}'        { PT _ (TS _ 27)       }
  L_integ    { PT _ (TI $$)         }
  L_VarIdent { PT _ (T_VarIdent $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

VarIdent :: { Language.Sprite.Syntax.Front.Abs.VarIdent }
VarIdent  : L_VarIdent { Language.Sprite.Syntax.Front.Abs.VarIdent $1 }

Term :: { Language.Sprite.Syntax.Front.Abs.Term }
Term
  : Integer { Language.Sprite.Syntax.Front.Abs.ConstInt $1 }
  | ConstBool { Language.Sprite.Syntax.Front.Abs.Bool $1 }
  | VarIdent { Language.Sprite.Syntax.Front.Abs.Var $1 }
  | Decl ScopedTerm { Language.Sprite.Syntax.Front.Abs.Let $1 $2 }
  | '(' VarIdent ')' '=>' '{' ScopedTerm '}' { Language.Sprite.Syntax.Front.Abs.Fun $2 $6 }
  | Term '(' FuncAppArg ')' { Language.Sprite.Syntax.Front.Abs.App $1 $3 }
  | FuncAppArg IntOp FuncAppArg { Language.Sprite.Syntax.Front.Abs.Op $1 $2 $3 }
  | '(' Term ')' { $2 }

ConstBool :: { Language.Sprite.Syntax.Front.Abs.ConstBool }
ConstBool
  : 'true' { Language.Sprite.Syntax.Front.Abs.ConstTrue }
  | 'false' { Language.Sprite.Syntax.Front.Abs.ConstFalse }

Annotation :: { Language.Sprite.Syntax.Front.Abs.Annotation }
Annotation
  : '/*@' 'val' VarIdent ':' RType '*/' { Language.Sprite.Syntax.Front.Abs.Annotation $3 $5 }

PlainDecl :: { Language.Sprite.Syntax.Front.Abs.PlainDecl }
PlainDecl
  : 'let' VarIdent '=' Term ';' { Language.Sprite.Syntax.Front.Abs.PlainDecl $2 $4 }

Decl :: { Language.Sprite.Syntax.Front.Abs.Decl }
Decl
  : Annotation PlainDecl { Language.Sprite.Syntax.Front.Abs.AnnotatedDecl $1 $2 }
  | PlainDecl { Language.Sprite.Syntax.Front.Abs.UnAnnotatedDecl $1 }

ListDecl :: { [Language.Sprite.Syntax.Front.Abs.Decl] }
ListDecl : {- empty -} { [] } | Decl ListDecl { (:) $1 $2 }

IntOp :: { Language.Sprite.Syntax.Front.Abs.IntOp }
IntOp
  : '+' { Language.Sprite.Syntax.Front.Abs.IntPlus }
  | '-' { Language.Sprite.Syntax.Front.Abs.IntMinus }
  | '*' { Language.Sprite.Syntax.Front.Abs.IntMultiply }

RType :: { Language.Sprite.Syntax.Front.Abs.RType }
RType
  : BaseType '[' VarIdent '|' Pred ']' { Language.Sprite.Syntax.Front.Abs.TypeRefined $1 $3 $5 }
  | FuncArg '=>' ScopedRType { Language.Sprite.Syntax.Front.Abs.TypeFun $1 $3 }
  | '(' RType ')' { $2 }

ScopedRType :: { Language.Sprite.Syntax.Front.Abs.ScopedRType }
ScopedRType
  : RType { Language.Sprite.Syntax.Front.Abs.ScopedRType $1 }

FuncArg :: { Language.Sprite.Syntax.Front.Abs.FuncArg }
FuncArg
  : VarIdent ':' RType { Language.Sprite.Syntax.Front.Abs.NamedFuncArg $1 $3 }

Pred :: { Language.Sprite.Syntax.Front.Abs.Pred }
Pred
  : VarIdent { Language.Sprite.Syntax.Front.Abs.PVar $1 }
  | ConstBool { Language.Sprite.Syntax.Front.Abs.PBool $1 }
  | Integer { Language.Sprite.Syntax.Front.Abs.PInt $1 }
  | Pred '==' Pred { Language.Sprite.Syntax.Front.Abs.PEq $1 $3 }
  | Pred '<' Pred { Language.Sprite.Syntax.Front.Abs.PLessThan $1 $3 }
  | Pred '<=' Pred { Language.Sprite.Syntax.Front.Abs.PLessOrEqThan $1 $3 }
  | Pred '>' Pred { Language.Sprite.Syntax.Front.Abs.PGreaterThan $1 $3 }
  | Pred '>=' Pred { Language.Sprite.Syntax.Front.Abs.PGreaterOrEqThan $1 $3 }
  | Pred '+' Pred { Language.Sprite.Syntax.Front.Abs.PPlus $1 $3 }
  | Pred '-' Pred { Language.Sprite.Syntax.Front.Abs.PMinus $1 $3 }
  | Pred '*' Pred { Language.Sprite.Syntax.Front.Abs.PMultiply $1 $3 }

Pattern :: { Language.Sprite.Syntax.Front.Abs.Pattern }
Pattern
  : VarIdent { Language.Sprite.Syntax.Front.Abs.PatternVar $1 }

ScopedTerm :: { Language.Sprite.Syntax.Front.Abs.ScopedTerm }
ScopedTerm
  : Term { Language.Sprite.Syntax.Front.Abs.ScopedTerm $1 }

BaseType :: { Language.Sprite.Syntax.Front.Abs.BaseType }
BaseType
  : 'int' { Language.Sprite.Syntax.Front.Abs.BaseTypeInt }
  | 'bool' { Language.Sprite.Syntax.Front.Abs.BaseTypeBool }

FuncAppArg :: { Language.Sprite.Syntax.Front.Abs.FuncAppArg }
FuncAppArg
  : ConstBool { Language.Sprite.Syntax.Front.Abs.FuncAppArgBool $1 }
  | Integer { Language.Sprite.Syntax.Front.Abs.FuncAppArgInt $1 }
  | VarIdent { Language.Sprite.Syntax.Front.Abs.FuncAppArgVar $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

