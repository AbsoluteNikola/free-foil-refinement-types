-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.4 from Par.y
-----------------------------------------------------------------------------

state 26 contains 1 shift/reduce conflicts.

rule 56 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	VarIdent -> L_VarIdent                             (2)
	Program -> ListQualifier Term                      (3)
	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'   (4)
	ListQualifier ->                                   (5)
	ListQualifier -> Qualifier ListQualifier           (6)
	QualifierArg -> VarIdent ':' BaseType              (7)
	ListQualifierArg -> QualifierArg                   (8)
	ListQualifierArg -> QualifierArg ',' ListQualifierArg   (9)
	Term -> Integer                                    (10)
	Term -> ConstBool                                  (11)
	Term -> VarIdent                                   (12)
	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term '}'   (13)
	Term -> Decl Term                                  (14)
	Term -> '(' VarIdent ')' '=>' '{' Term '}'         (15)
	Term -> VarIdent '(' FuncAppArg ')'                (16)
	Term -> FuncAppArg IntOp FuncAppArg                (17)
	Term -> '(' Term ')'                               (18)
	ConstBool -> 'true'                                (19)
	ConstBool -> 'false'                               (20)
	Annotation -> '/*@' 'val' VarIdent ':' RType '*/'   (21)
	Decl -> Annotation 'let' 'rec' VarIdent '=' Term ';'   (22)
	Decl -> Annotation 'let' VarIdent '=' Term ';'     (23)
	Decl -> 'let' VarIdent '=' Term ';'                (24)
	IntOp -> '+'                                       (25)
	IntOp -> '-'                                       (26)
	IntOp -> '*'                                       (27)
	IntOp -> '=='                                      (28)
	IntOp -> '<'                                       (29)
	IntOp -> '<='                                      (30)
	IntOp -> '>'                                       (31)
	IntOp -> '>='                                      (32)
	RType2 -> BaseType '[' VarIdent '|' Pred ']'       (33)
	RType2 -> BaseType '[' '?' ']'                     (34)
	RType2 -> '(' RType ')'                            (35)
	RType1 -> FuncArg '=>' RType2                      (36)
	RType1 -> RType2                                   (37)
	RType -> RType1                                    (38)
	FuncArg -> VarIdent ':' RType                      (39)
	Pred4 -> VarIdent                                  (40)
	Pred4 -> ConstBool                                 (41)
	Pred4 -> Integer                                   (42)
	Pred4 -> '(' Pred ')'                              (43)
	Pred1 -> Pred1 '==' Pred2                          (44)
	Pred1 -> Pred2                                     (45)
	Pred2 -> Pred2 '<' Pred3                           (46)
	Pred2 -> Pred2 '<=' Pred3                          (47)
	Pred2 -> Pred2 '>' Pred3                           (48)
	Pred2 -> Pred2 '>=' Pred3                          (49)
	Pred2 -> Pred3                                     (50)
	Pred3 -> Pred3 '+' Pred4                           (51)
	Pred3 -> Pred3 '-' Pred4                           (52)
	Pred3 -> Pred3 '*' Pred4                           (53)
	Pred3 -> Pred4                                     (54)
	Pred -> Pred1                                      (55)
	Pattern -> VarIdent                                (56)
	BaseType -> 'int'                                  (57)
	BaseType -> 'bool'                                 (58)
	FuncAppArg -> ConstBool                            (59)
	FuncAppArg -> Integer                              (60)
	FuncAppArg -> VarIdent                             (61)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'*/'           { PT _ (TS _ 4) }
	'+'            { PT _ (TS _ 5) }
	','            { PT _ (TS _ 6) }
	'-'            { PT _ (TS _ 7) }
	'/**@'         { PT _ (TS _ 8) }
	'/*@'          { PT _ (TS _ 9) }
	':'            { PT _ (TS _ 10) }
	';'            { PT _ (TS _ 11) }
	'<'            { PT _ (TS _ 12) }
	'<='           { PT _ (TS _ 13) }
	'='            { PT _ (TS _ 14) }
	'=='           { PT _ (TS _ 15) }
	'=>'           { PT _ (TS _ 16) }
	'>'            { PT _ (TS _ 17) }
	'>='           { PT _ (TS _ 18) }
	'?'            { PT _ (TS _ 19) }
	'['            { PT _ (TS _ 20) }
	']'            { PT _ (TS _ 21) }
	'bool'         { PT _ (TS _ 22) }
	'else'         { PT _ (TS _ 23) }
	'false'        { PT _ (TS _ 24) }
	'if'           { PT _ (TS _ 25) }
	'int'          { PT _ (TS _ 26) }
	'let'          { PT _ (TS _ 27) }
	'qualif'       { PT _ (TS _ 28) }
	'rec'          { PT _ (TS _ 29) }
	'true'         { PT _ (TS _ 30) }
	'val'          { PT _ (TS _ 31) }
	'{'            { PT _ (TS _ 32) }
	'|'            { PT _ (TS _ 33) }
	'}'            { PT _ (TS _ 34) }
	L_integ        { PT _ (TI $$) }
	L_VarIdent     { PT _ (T_VarIdent $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	VarIdent        rule  2
	Program         rule  3
	Qualifier       rule  4
	ListQualifier   rules 5, 6
	QualifierArg    rule  7
	ListQualifierArg rules 8, 9
	Term            rules 10, 11, 12, 13, 14, 15, 16, 17, 18
	ConstBool       rules 19, 20
	Annotation      rule  21
	Decl            rules 22, 23, 24
	IntOp           rules 25, 26, 27, 28, 29, 30, 31, 32
	RType2          rules 33, 34, 35
	RType1          rules 36, 37
	RType           rule  38
	FuncArg         rule  39
	Pred4           rules 40, 41, 42, 43
	Pred1           rules 44, 45
	Pred2           rules 46, 47, 48, 49, 50
	Pred3           rules 51, 52, 53, 54
	Pred            rule  55
	Pattern         rule  56
	BaseType        rules 57, 58
	FuncAppArg      rules 59, 60, 61

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            reduce using rule 5
	'/**@'         shift, and enter state 6
	'/*@'          reduce using rule 5
	'false'        reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'true'         reduce using rule 5
	L_integ        reduce using rule 5
	L_VarIdent     reduce using rule 5

	Program        goto state 3
	Qualifier      goto state 4
	ListQualifier  goto state 5

State 1

	Integer -> . L_integ                                (rule 1)

	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	']'            reduce using rule 1
	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	ListQualifier -> Qualifier . ListQualifier          (rule 6)

	'('            reduce using rule 5
	'/**@'         shift, and enter state 6
	'/*@'          reduce using rule 5
	'false'        reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'true'         reduce using rule 5
	L_integ        reduce using rule 5
	L_VarIdent     reduce using rule 5

	Qualifier      goto state 4
	ListQualifier  goto state 22

State 5

	Program -> ListQualifier . Term                     (rule 3)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 10
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 6

	Qualifier -> '/**@' . 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	'qualif'       shift, and enter state 7


State 7

	Qualifier -> '/**@' 'qualif' . VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 40

State 8

	Term -> Integer .                                   (rule 10)
	FuncAppArg -> Integer .                             (rule 60)

	')'            reduce using rule 10
	'*'            reduce using rule 60
	'+'            reduce using rule 60
	'-'            reduce using rule 60
	';'            reduce using rule 10
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 9

	Term -> VarIdent .                                  (rule 12)
	Term -> VarIdent . '(' FuncAppArg ')'               (rule 16)
	FuncAppArg -> VarIdent .                            (rule 61)

	'('            shift, and enter state 39
	')'            reduce using rule 12
	'*'            reduce using rule 61
	'+'            reduce using rule 61
	'-'            reduce using rule 61
	';'            reduce using rule 12
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 10

	Program -> ListQualifier Term .                     (rule 3)

	%eof           reduce using rule 3


State 11

	Term -> ConstBool .                                 (rule 11)
	FuncAppArg -> ConstBool .                           (rule 59)

	')'            reduce using rule 11
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	'-'            reduce using rule 59
	';'            reduce using rule 11
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 12

	Decl -> Annotation . 'let' 'rec' VarIdent '=' Term ';'    (rule 22)
	Decl -> Annotation . 'let' VarIdent '=' Term ';'    (rule 23)

	'let'          shift, and enter state 38


State 13

	Term -> Decl . Term                                 (rule 14)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 37
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 14

	Term -> FuncAppArg . IntOp FuncAppArg               (rule 17)

	'*'            shift, and enter state 29
	'+'            shift, and enter state 30
	'-'            shift, and enter state 31
	'<'            shift, and enter state 32
	'<='           shift, and enter state 33
	'=='           shift, and enter state 34
	'>'            shift, and enter state 35
	'>='           shift, and enter state 36

	IntOp          goto state 28

State 15

	Term -> '(' . VarIdent ')' '=>' '{' Term '}'        (rule 15)
	Term -> '(' . Term ')'                              (rule 18)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 26
	Term           goto state 27
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 16

	Annotation -> '/*@' . 'val' VarIdent ':' RType '*/'    (rule 21)

	'val'          shift, and enter state 25


State 17

	ConstBool -> 'false' .                              (rule 20)

	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'<'            reduce using rule 20
	'<='           reduce using rule 20
	'=='           reduce using rule 20
	'>'            reduce using rule 20
	'>='           reduce using rule 20
	']'            reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


State 18

	Term -> 'if' . '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term '}'    (rule 13)

	'('            shift, and enter state 24


State 19

	Decl -> 'let' . VarIdent '=' Term ';'               (rule 24)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 23

State 20

	ConstBool -> 'true' .                               (rule 19)

	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'<'            reduce using rule 19
	'<='           reduce using rule 19
	'=='           reduce using rule 19
	'>'            reduce using rule 19
	'>='           reduce using rule 19
	']'            reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 21

	VarIdent -> L_VarIdent .                            (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'='            reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	']'            reduce using rule 2
	'|'            reduce using rule 2
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 22

	ListQualifier -> Qualifier ListQualifier .          (rule 6)

	'('            reduce using rule 6
	'/*@'          reduce using rule 6
	'false'        reduce using rule 6
	'if'           reduce using rule 6
	'let'          reduce using rule 6
	'true'         reduce using rule 6
	L_integ        reduce using rule 6
	L_VarIdent     reduce using rule 6


State 23

	Decl -> 'let' VarIdent . '=' Term ';'               (rule 24)

	'='            shift, and enter state 53


State 24

	Term -> 'if' '(' . FuncAppArg ')' '{' Term '}' 'else' '{' Term '}'    (rule 13)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 42
	VarIdent       goto state 43
	ConstBool      goto state 44
	FuncAppArg     goto state 52

State 25

	Annotation -> '/*@' 'val' . VarIdent ':' RType '*/'    (rule 21)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 51

State 26

	Term -> VarIdent .                                  (rule 12)
	Term -> '(' VarIdent . ')' '=>' '{' Term '}'        (rule 15)
	Term -> VarIdent . '(' FuncAppArg ')'               (rule 16)
	FuncAppArg -> VarIdent .                            (rule 61)

	'('            shift, and enter state 39
	')'            shift, and enter state 50
			(reduce using rule 12)

	'*'            reduce using rule 61
	'+'            reduce using rule 61
	'-'            reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61


State 27

	Term -> '(' Term . ')'                              (rule 18)

	')'            shift, and enter state 49


State 28

	Term -> FuncAppArg IntOp . FuncAppArg               (rule 17)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 42
	VarIdent       goto state 43
	ConstBool      goto state 44
	FuncAppArg     goto state 48

State 29

	IntOp -> '*' .                                      (rule 27)

	'false'        reduce using rule 27
	'true'         reduce using rule 27
	L_integ        reduce using rule 27
	L_VarIdent     reduce using rule 27


State 30

	IntOp -> '+' .                                      (rule 25)

	'false'        reduce using rule 25
	'true'         reduce using rule 25
	L_integ        reduce using rule 25
	L_VarIdent     reduce using rule 25


State 31

	IntOp -> '-' .                                      (rule 26)

	'false'        reduce using rule 26
	'true'         reduce using rule 26
	L_integ        reduce using rule 26
	L_VarIdent     reduce using rule 26


State 32

	IntOp -> '<' .                                      (rule 29)

	'false'        reduce using rule 29
	'true'         reduce using rule 29
	L_integ        reduce using rule 29
	L_VarIdent     reduce using rule 29


State 33

	IntOp -> '<=' .                                     (rule 30)

	'false'        reduce using rule 30
	'true'         reduce using rule 30
	L_integ        reduce using rule 30
	L_VarIdent     reduce using rule 30


State 34

	IntOp -> '==' .                                     (rule 28)

	'false'        reduce using rule 28
	'true'         reduce using rule 28
	L_integ        reduce using rule 28
	L_VarIdent     reduce using rule 28


State 35

	IntOp -> '>' .                                      (rule 31)

	'false'        reduce using rule 31
	'true'         reduce using rule 31
	L_integ        reduce using rule 31
	L_VarIdent     reduce using rule 31


State 36

	IntOp -> '>=' .                                     (rule 32)

	'false'        reduce using rule 32
	'true'         reduce using rule 32
	L_integ        reduce using rule 32
	L_VarIdent     reduce using rule 32


State 37

	Term -> Decl Term .                                 (rule 14)

	')'            reduce using rule 14
	';'            reduce using rule 14
	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 38

	Decl -> Annotation 'let' . 'rec' VarIdent '=' Term ';'    (rule 22)
	Decl -> Annotation 'let' . VarIdent '=' Term ';'    (rule 23)

	'rec'          shift, and enter state 47
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 46

State 39

	Term -> VarIdent '(' . FuncAppArg ')'               (rule 16)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 42
	VarIdent       goto state 43
	ConstBool      goto state 44
	FuncAppArg     goto state 45

State 40

	Qualifier -> '/**@' 'qualif' VarIdent . '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	'('            shift, and enter state 41


State 41

	Qualifier -> '/**@' 'qualif' VarIdent '(' . ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 61
	QualifierArg   goto state 62
	ListQualifierArggoto state 63

State 42

	FuncAppArg -> Integer .                             (rule 60)

	')'            reduce using rule 60
	';'            reduce using rule 60
	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 43

	FuncAppArg -> VarIdent .                            (rule 61)

	')'            reduce using rule 61
	';'            reduce using rule 61
	'}'            reduce using rule 61
	%eof           reduce using rule 61


State 44

	FuncAppArg -> ConstBool .                           (rule 59)

	')'            reduce using rule 59
	';'            reduce using rule 59
	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 45

	Term -> VarIdent '(' FuncAppArg . ')'               (rule 16)

	')'            shift, and enter state 60


State 46

	Decl -> Annotation 'let' VarIdent . '=' Term ';'    (rule 23)

	'='            shift, and enter state 59


State 47

	Decl -> Annotation 'let' 'rec' . VarIdent '=' Term ';'    (rule 22)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 58

State 48

	Term -> FuncAppArg IntOp FuncAppArg .               (rule 17)

	')'            reduce using rule 17
	';'            reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 49

	Term -> '(' Term ')' .                              (rule 18)

	')'            reduce using rule 18
	';'            reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 50

	Term -> '(' VarIdent ')' . '=>' '{' Term '}'        (rule 15)

	'=>'           shift, and enter state 57


State 51

	Annotation -> '/*@' 'val' VarIdent . ':' RType '*/'    (rule 21)

	':'            shift, and enter state 56


State 52

	Term -> 'if' '(' FuncAppArg . ')' '{' Term '}' 'else' '{' Term '}'    (rule 13)

	')'            shift, and enter state 55


State 53

	Decl -> 'let' VarIdent '=' . Term ';'               (rule 24)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 54
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 54

	Decl -> 'let' VarIdent '=' Term . ';'               (rule 24)

	';'            shift, and enter state 80


State 55

	Term -> 'if' '(' FuncAppArg ')' . '{' Term '}' 'else' '{' Term '}'    (rule 13)

	'{'            shift, and enter state 79


State 56

	Annotation -> '/*@' 'val' VarIdent ':' . RType '*/'    (rule 21)

	'('            shift, and enter state 76
	'bool'         shift, and enter state 77
	'int'          shift, and enter state 78
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 70
	RType2         goto state 71
	RType1         goto state 72
	RType          goto state 73
	FuncArg        goto state 74
	BaseType       goto state 75

State 57

	Term -> '(' VarIdent ')' '=>' . '{' Term '}'        (rule 15)

	'{'            shift, and enter state 69


State 58

	Decl -> Annotation 'let' 'rec' VarIdent . '=' Term ';'    (rule 22)

	'='            shift, and enter state 68


State 59

	Decl -> Annotation 'let' VarIdent '=' . Term ';'    (rule 23)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 67
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 60

	Term -> VarIdent '(' FuncAppArg ')' .               (rule 16)

	')'            reduce using rule 16
	';'            reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 61

	QualifierArg -> VarIdent . ':' BaseType             (rule 7)

	':'            shift, and enter state 66


State 62

	ListQualifierArg -> QualifierArg .                  (rule 8)
	ListQualifierArg -> QualifierArg . ',' ListQualifierArg    (rule 9)

	')'            reduce using rule 8
	','            shift, and enter state 65


State 63

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg . ')' ':' '(' Pred ')' '*/'    (rule 4)

	')'            shift, and enter state 64


State 64

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' . ':' '(' Pred ')' '*/'    (rule 4)

	':'            shift, and enter state 92


State 65

	ListQualifierArg -> QualifierArg ',' . ListQualifierArg    (rule 9)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 61
	QualifierArg   goto state 62
	ListQualifierArggoto state 91

State 66

	QualifierArg -> VarIdent ':' . BaseType             (rule 7)

	'bool'         shift, and enter state 77
	'int'          shift, and enter state 78

	BaseType       goto state 90

State 67

	Decl -> Annotation 'let' VarIdent '=' Term . ';'    (rule 23)

	';'            shift, and enter state 89


State 68

	Decl -> Annotation 'let' 'rec' VarIdent '=' . Term ';'    (rule 22)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 88
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 69

	Term -> '(' VarIdent ')' '=>' '{' . Term '}'        (rule 15)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 87
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 70

	FuncArg -> VarIdent . ':' RType                     (rule 39)

	':'            shift, and enter state 86


State 71

	RType1 -> RType2 .                                  (rule 37)

	')'            reduce using rule 37
	'*/'           reduce using rule 37
	'=>'           reduce using rule 37


State 72

	RType -> RType1 .                                   (rule 38)

	')'            reduce using rule 38
	'*/'           reduce using rule 38
	'=>'           reduce using rule 38


State 73

	Annotation -> '/*@' 'val' VarIdent ':' RType . '*/'    (rule 21)

	'*/'           shift, and enter state 85


State 74

	RType1 -> FuncArg . '=>' RType2                     (rule 36)

	'=>'           shift, and enter state 84


State 75

	RType2 -> BaseType . '[' VarIdent '|' Pred ']'      (rule 33)
	RType2 -> BaseType . '[' '?' ']'                    (rule 34)

	'['            shift, and enter state 83


State 76

	RType2 -> '(' . RType ')'                           (rule 35)

	'('            shift, and enter state 76
	'bool'         shift, and enter state 77
	'int'          shift, and enter state 78
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 70
	RType2         goto state 71
	RType1         goto state 72
	RType          goto state 82
	FuncArg        goto state 74
	BaseType       goto state 75

State 77

	BaseType -> 'bool' .                                (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'['            reduce using rule 58


State 78

	BaseType -> 'int' .                                 (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	'['            reduce using rule 57


State 79

	Term -> 'if' '(' FuncAppArg ')' '{' . Term '}' 'else' '{' Term '}'    (rule 13)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 81
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 80

	Decl -> 'let' VarIdent '=' Term ';' .               (rule 24)

	'('            reduce using rule 24
	'/*@'          reduce using rule 24
	'false'        reduce using rule 24
	'if'           reduce using rule 24
	'let'          reduce using rule 24
	'true'         reduce using rule 24
	L_integ        reduce using rule 24
	L_VarIdent     reduce using rule 24


State 81

	Term -> 'if' '(' FuncAppArg ')' '{' Term . '}' 'else' '{' Term '}'    (rule 13)

	'}'            shift, and enter state 101


State 82

	RType2 -> '(' RType . ')'                           (rule 35)

	')'            shift, and enter state 100


State 83

	RType2 -> BaseType '[' . VarIdent '|' Pred ']'      (rule 33)
	RType2 -> BaseType '[' . '?' ']'                    (rule 34)

	'?'            shift, and enter state 99
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 98

State 84

	RType1 -> FuncArg '=>' . RType2                     (rule 36)

	'('            shift, and enter state 76
	'bool'         shift, and enter state 77
	'int'          shift, and enter state 78

	RType2         goto state 97
	BaseType       goto state 75

State 85

	Annotation -> '/*@' 'val' VarIdent ':' RType '*/' .    (rule 21)

	'let'          reduce using rule 21


State 86

	FuncArg -> VarIdent ':' . RType                     (rule 39)

	'('            shift, and enter state 76
	'bool'         shift, and enter state 77
	'int'          shift, and enter state 78
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 70
	RType2         goto state 71
	RType1         goto state 72
	RType          goto state 96
	FuncArg        goto state 74
	BaseType       goto state 75

State 87

	Term -> '(' VarIdent ')' '=>' '{' Term . '}'        (rule 15)

	'}'            shift, and enter state 95


State 88

	Decl -> Annotation 'let' 'rec' VarIdent '=' Term . ';'    (rule 22)

	';'            shift, and enter state 94


State 89

	Decl -> Annotation 'let' VarIdent '=' Term ';' .    (rule 23)

	'('            reduce using rule 23
	'/*@'          reduce using rule 23
	'false'        reduce using rule 23
	'if'           reduce using rule 23
	'let'          reduce using rule 23
	'true'         reduce using rule 23
	L_integ        reduce using rule 23
	L_VarIdent     reduce using rule 23


State 90

	QualifierArg -> VarIdent ':' BaseType .             (rule 7)

	')'            reduce using rule 7
	','            reduce using rule 7


State 91

	ListQualifierArg -> QualifierArg ',' ListQualifierArg .    (rule 9)

	')'            reduce using rule 9


State 92

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' . '(' Pred ')' '*/'    (rule 4)

	'('            shift, and enter state 93


State 93

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' . Pred ')' '*/'    (rule 4)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred1          goto state 109
	Pred2          goto state 110
	Pred3          goto state 111
	Pred           goto state 112

State 94

	Decl -> Annotation 'let' 'rec' VarIdent '=' Term ';' .    (rule 22)

	'('            reduce using rule 22
	'/*@'          reduce using rule 22
	'false'        reduce using rule 22
	'if'           reduce using rule 22
	'let'          reduce using rule 22
	'true'         reduce using rule 22
	L_integ        reduce using rule 22
	L_VarIdent     reduce using rule 22


State 95

	Term -> '(' VarIdent ')' '=>' '{' Term '}' .        (rule 15)

	')'            reduce using rule 15
	';'            reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 96

	FuncArg -> VarIdent ':' RType .                     (rule 39)

	'=>'           reduce using rule 39


State 97

	RType1 -> FuncArg '=>' RType2 .                     (rule 36)

	')'            reduce using rule 36
	'*/'           reduce using rule 36
	'=>'           reduce using rule 36


State 98

	RType2 -> BaseType '[' VarIdent . '|' Pred ']'      (rule 33)

	'|'            shift, and enter state 104


State 99

	RType2 -> BaseType '[' '?' . ']'                    (rule 34)

	']'            shift, and enter state 103


State 100

	RType2 -> '(' RType ')' .                           (rule 35)

	')'            reduce using rule 35
	'*/'           reduce using rule 35
	'=>'           reduce using rule 35


State 101

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' . 'else' '{' Term '}'    (rule 13)

	'else'         shift, and enter state 102


State 102

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' . '{' Term '}'    (rule 13)

	'{'            shift, and enter state 125


State 103

	RType2 -> BaseType '[' '?' ']' .                    (rule 34)

	')'            reduce using rule 34
	'*/'           reduce using rule 34
	'=>'           reduce using rule 34


State 104

	RType2 -> BaseType '[' VarIdent '|' . Pred ']'      (rule 33)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred1          goto state 109
	Pred2          goto state 110
	Pred3          goto state 111
	Pred           goto state 124

State 105

	Pred4 -> Integer .                                  (rule 42)

	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	']'            reduce using rule 42


State 106

	Pred4 -> VarIdent .                                 (rule 40)

	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	']'            reduce using rule 40


State 107

	Pred4 -> ConstBool .                                (rule 41)

	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	']'            reduce using rule 41


State 108

	Pred3 -> Pred4 .                                    (rule 54)

	')'            reduce using rule 54
	'*'            reduce using rule 54
	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	']'            reduce using rule 54


State 109

	Pred1 -> Pred1 . '==' Pred2                         (rule 44)
	Pred -> Pred1 .                                     (rule 55)

	')'            reduce using rule 55
	'=='           shift, and enter state 123
	']'            reduce using rule 55


State 110

	Pred1 -> Pred2 .                                    (rule 45)
	Pred2 -> Pred2 . '<' Pred3                          (rule 46)
	Pred2 -> Pred2 . '<=' Pred3                         (rule 47)
	Pred2 -> Pred2 . '>' Pred3                          (rule 48)
	Pred2 -> Pred2 . '>=' Pred3                         (rule 49)

	')'            reduce using rule 45
	'<'            shift, and enter state 119
	'<='           shift, and enter state 120
	'=='           reduce using rule 45
	'>'            shift, and enter state 121
	'>='           shift, and enter state 122
	']'            reduce using rule 45


State 111

	Pred2 -> Pred3 .                                    (rule 50)
	Pred3 -> Pred3 . '+' Pred4                          (rule 51)
	Pred3 -> Pred3 . '-' Pred4                          (rule 52)
	Pred3 -> Pred3 . '*' Pred4                          (rule 53)

	')'            reduce using rule 50
	'*'            shift, and enter state 116
	'+'            shift, and enter state 117
	'-'            shift, and enter state 118
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	']'            reduce using rule 50


State 112

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred . ')' '*/'    (rule 4)

	')'            shift, and enter state 115


State 113

	Pred4 -> '(' . Pred ')'                             (rule 43)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred1          goto state 109
	Pred2          goto state 110
	Pred3          goto state 111
	Pred           goto state 114

State 114

	Pred4 -> '(' Pred . ')'                             (rule 43)

	')'            shift, and enter state 137


State 115

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' . '*/'    (rule 4)

	'*/'           shift, and enter state 136


State 116

	Pred3 -> Pred3 '*' . Pred4                          (rule 53)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 135

State 117

	Pred3 -> Pred3 '+' . Pred4                          (rule 51)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 134

State 118

	Pred3 -> Pred3 '-' . Pred4                          (rule 52)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 133

State 119

	Pred2 -> Pred2 '<' . Pred3                          (rule 46)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred3          goto state 132

State 120

	Pred2 -> Pred2 '<=' . Pred3                         (rule 47)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred3          goto state 131

State 121

	Pred2 -> Pred2 '>' . Pred3                          (rule 48)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred3          goto state 130

State 122

	Pred2 -> Pred2 '>=' . Pred3                         (rule 49)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred3          goto state 129

State 123

	Pred1 -> Pred1 '==' . Pred2                         (rule 44)

	'('            shift, and enter state 113
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 105
	VarIdent       goto state 106
	ConstBool      goto state 107
	Pred4          goto state 108
	Pred2          goto state 128
	Pred3          goto state 111

State 124

	RType2 -> BaseType '[' VarIdent '|' Pred . ']'      (rule 33)

	']'            shift, and enter state 127


State 125

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' . Term '}'    (rule 13)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 126
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 126

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term . '}'    (rule 13)

	'}'            shift, and enter state 138


State 127

	RType2 -> BaseType '[' VarIdent '|' Pred ']' .      (rule 33)

	')'            reduce using rule 33
	'*/'           reduce using rule 33
	'=>'           reduce using rule 33


State 128

	Pred1 -> Pred1 '==' Pred2 .                         (rule 44)
	Pred2 -> Pred2 . '<' Pred3                          (rule 46)
	Pred2 -> Pred2 . '<=' Pred3                         (rule 47)
	Pred2 -> Pred2 . '>' Pred3                          (rule 48)
	Pred2 -> Pred2 . '>=' Pred3                         (rule 49)

	')'            reduce using rule 44
	'<'            shift, and enter state 119
	'<='           shift, and enter state 120
	'=='           reduce using rule 44
	'>'            shift, and enter state 121
	'>='           shift, and enter state 122
	']'            reduce using rule 44


State 129

	Pred2 -> Pred2 '>=' Pred3 .                         (rule 49)
	Pred3 -> Pred3 . '+' Pred4                          (rule 51)
	Pred3 -> Pred3 . '-' Pred4                          (rule 52)
	Pred3 -> Pred3 . '*' Pred4                          (rule 53)

	')'            reduce using rule 49
	'*'            shift, and enter state 116
	'+'            shift, and enter state 117
	'-'            shift, and enter state 118
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	']'            reduce using rule 49


State 130

	Pred2 -> Pred2 '>' Pred3 .                          (rule 48)
	Pred3 -> Pred3 . '+' Pred4                          (rule 51)
	Pred3 -> Pred3 . '-' Pred4                          (rule 52)
	Pred3 -> Pred3 . '*' Pred4                          (rule 53)

	')'            reduce using rule 48
	'*'            shift, and enter state 116
	'+'            shift, and enter state 117
	'-'            shift, and enter state 118
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	']'            reduce using rule 48


State 131

	Pred2 -> Pred2 '<=' Pred3 .                         (rule 47)
	Pred3 -> Pred3 . '+' Pred4                          (rule 51)
	Pred3 -> Pred3 . '-' Pred4                          (rule 52)
	Pred3 -> Pred3 . '*' Pred4                          (rule 53)

	')'            reduce using rule 47
	'*'            shift, and enter state 116
	'+'            shift, and enter state 117
	'-'            shift, and enter state 118
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	']'            reduce using rule 47


State 132

	Pred2 -> Pred2 '<' Pred3 .                          (rule 46)
	Pred3 -> Pred3 . '+' Pred4                          (rule 51)
	Pred3 -> Pred3 . '-' Pred4                          (rule 52)
	Pred3 -> Pred3 . '*' Pred4                          (rule 53)

	')'            reduce using rule 46
	'*'            shift, and enter state 116
	'+'            shift, and enter state 117
	'-'            shift, and enter state 118
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	']'            reduce using rule 46


State 133

	Pred3 -> Pred3 '-' Pred4 .                          (rule 52)

	')'            reduce using rule 52
	'*'            reduce using rule 52
	'+'            reduce using rule 52
	'-'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	']'            reduce using rule 52


State 134

	Pred3 -> Pred3 '+' Pred4 .                          (rule 51)

	')'            reduce using rule 51
	'*'            reduce using rule 51
	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	']'            reduce using rule 51


State 135

	Pred3 -> Pred3 '*' Pred4 .                          (rule 53)

	')'            reduce using rule 53
	'*'            reduce using rule 53
	'+'            reduce using rule 53
	'-'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	']'            reduce using rule 53


State 136

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/' .    (rule 4)

	'('            reduce using rule 4
	'/**@'         reduce using rule 4
	'/*@'          reduce using rule 4
	'false'        reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'true'         reduce using rule 4
	L_integ        reduce using rule 4
	L_VarIdent     reduce using rule 4


State 137

	Pred4 -> '(' Pred ')' .                             (rule 43)

	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	']'            reduce using rule 43


State 138

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term '}' .    (rule 13)

	')'            reduce using rule 13
	';'            reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 62
Number of terminals: 36
Number of non-terminals: 25
Number of states: 139
