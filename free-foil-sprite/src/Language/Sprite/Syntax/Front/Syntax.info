-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.4 from Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	VarIdent -> L_VarIdent                             (2)
	Program -> ListQualifier Term                      (3)
	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'   (4)
	ListQualifier ->                                   (5)
	ListQualifier -> Qualifier ListQualifier           (6)
	QualifierArg -> VarIdent ':' BaseType              (7)
	ListQualifierArg -> QualifierArg                   (8)
	ListQualifierArg -> QualifierArg ',' ListQualifierArg   (9)
	Term -> Integer                                    (10)
	Term -> ConstBool                                  (11)
	Term -> VarIdent                                   (12)
	Term -> VarIdent '(' ListFuncAppArg ')'            (13)
	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term '}'   (14)
	Term -> Decl Term                                  (15)
	Term -> '(' ListFunArgName ')' '=>' '{' Term '}'   (16)
	Term -> FuncAppArg IntOp FuncAppArg                (17)
	ConstBool -> 'true'                                (18)
	ConstBool -> 'false'                               (19)
	Annotation -> '/*@' 'val' VarIdent ':' RType '*/'   (20)
	Decl -> Annotation 'let' 'rec' VarIdent '=' Term ';'   (21)
	Decl -> Annotation 'let' VarIdent '=' Term ';'     (22)
	Decl -> 'let' VarIdent '=' Term ';'                (23)
	IntOp -> '+'                                       (24)
	IntOp -> '-'                                       (25)
	IntOp -> '*'                                       (26)
	IntOp -> '=='                                      (27)
	IntOp -> '<'                                       (28)
	IntOp -> '<='                                      (29)
	IntOp -> '>'                                       (30)
	IntOp -> '>='                                      (31)
	RType -> FuncArg '=>' RType                        (32)
	RType -> BaseType '[' VarIdent '|' Pred ']'        (33)
	RType -> BaseType '[' '?' ']'                      (34)
	RType -> '\'' VarIdent                             (35)
	RType -> BaseType                                  (36)
	RType -> RType1                                    (37)
	RType1 -> RType2                                   (38)
	RType2 -> RType3                                   (39)
	RType3 -> '(' RType ')'                            (40)
	FuncArg -> VarIdent ':' RType                      (41)
	FuncArg -> '_' ':' RType                           (42)
	Pred6 -> VarIdent                                  (43)
	Pred6 -> ConstBool                                 (44)
	Pred6 -> Integer                                   (45)
	Pred6 -> '(' Pred ')'                              (46)
	Pred1 -> Pred1 '||' Pred2                          (47)
	Pred1 -> Pred2                                     (48)
	Pred2 -> Pred2 '&&' Pred3                          (49)
	Pred2 -> Pred3                                     (50)
	Pred3 -> Pred3 '==' Pred4                          (51)
	Pred3 -> Pred4                                     (52)
	Pred4 -> Pred4 '<' Pred5                           (53)
	Pred4 -> Pred4 '<=' Pred5                          (54)
	Pred4 -> Pred4 '>' Pred5                           (55)
	Pred4 -> Pred4 '>=' Pred5                          (56)
	Pred4 -> Pred5                                     (57)
	Pred5 -> Pred5 '+' Pred6                           (58)
	Pred5 -> Pred5 '-' Pred6                           (59)
	Pred5 -> Pred5 '*' Pred6                           (60)
	Pred5 -> Pred6                                     (61)
	Pred -> Pred1                                      (62)
	BaseType -> 'int'                                  (63)
	BaseType -> 'bool'                                 (64)
	FunArgName -> VarIdent                             (65)
	ListFunArgName -> FunArgName                       (66)
	ListFunArgName -> FunArgName ',' ListFunArgName    (67)
	FuncAppArg -> ConstBool                            (68)
	FuncAppArg -> Integer                              (69)
	FuncAppArg -> VarIdent                             (70)
	ListFuncAppArg -> FuncAppArg                       (71)
	ListFuncAppArg -> FuncAppArg ',' ListFuncAppArg    (72)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'&&'           { PT _ (TS _ 1) }
	'\''           { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	')'            { PT _ (TS _ 4) }
	'*'            { PT _ (TS _ 5) }
	'*/'           { PT _ (TS _ 6) }
	'+'            { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'-'            { PT _ (TS _ 9) }
	'/**@'         { PT _ (TS _ 10) }
	'/*@'          { PT _ (TS _ 11) }
	':'            { PT _ (TS _ 12) }
	';'            { PT _ (TS _ 13) }
	'<'            { PT _ (TS _ 14) }
	'<='           { PT _ (TS _ 15) }
	'='            { PT _ (TS _ 16) }
	'=='           { PT _ (TS _ 17) }
	'=>'           { PT _ (TS _ 18) }
	'>'            { PT _ (TS _ 19) }
	'>='           { PT _ (TS _ 20) }
	'?'            { PT _ (TS _ 21) }
	'['            { PT _ (TS _ 22) }
	']'            { PT _ (TS _ 23) }
	'_'            { PT _ (TS _ 24) }
	'bool'         { PT _ (TS _ 25) }
	'else'         { PT _ (TS _ 26) }
	'false'        { PT _ (TS _ 27) }
	'if'           { PT _ (TS _ 28) }
	'int'          { PT _ (TS _ 29) }
	'let'          { PT _ (TS _ 30) }
	'qualif'       { PT _ (TS _ 31) }
	'rec'          { PT _ (TS _ 32) }
	'true'         { PT _ (TS _ 33) }
	'val'          { PT _ (TS _ 34) }
	'{'            { PT _ (TS _ 35) }
	'|'            { PT _ (TS _ 36) }
	'||'           { PT _ (TS _ 37) }
	'}'            { PT _ (TS _ 38) }
	L_integ        { PT _ (TI $$) }
	L_VarIdent     { PT _ (T_VarIdent $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	VarIdent        rule  2
	Program         rule  3
	Qualifier       rule  4
	ListQualifier   rules 5, 6
	QualifierArg    rule  7
	ListQualifierArg rules 8, 9
	Term            rules 10, 11, 12, 13, 14, 15, 16, 17
	ConstBool       rules 18, 19
	Annotation      rule  20
	Decl            rules 21, 22, 23
	IntOp           rules 24, 25, 26, 27, 28, 29, 30, 31
	RType           rules 32, 33, 34, 35, 36, 37
	RType1          rule  38
	RType2          rule  39
	RType3          rule  40
	FuncArg         rules 41, 42
	Pred6           rules 43, 44, 45, 46
	Pred1           rules 47, 48
	Pred2           rules 49, 50
	Pred3           rules 51, 52
	Pred4           rules 53, 54, 55, 56, 57
	Pred5           rules 58, 59, 60, 61
	Pred            rule  62
	BaseType        rules 63, 64
	FunArgName      rule  65
	ListFunArgName  rules 66, 67
	FuncAppArg      rules 68, 69, 70
	ListFuncAppArg  rules 71, 72

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            reduce using rule 5
	'/**@'         shift, and enter state 6
	'/*@'          reduce using rule 5
	'false'        reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'true'         reduce using rule 5
	L_integ        reduce using rule 5
	L_VarIdent     reduce using rule 5

	Program        goto state 3
	Qualifier      goto state 4
	ListQualifier  goto state 5

State 1

	Integer -> . L_integ                                (rule 1)

	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'&&'           reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	']'            reduce using rule 1
	'||'           reduce using rule 1
	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	ListQualifier -> Qualifier . ListQualifier          (rule 6)

	'('            reduce using rule 5
	'/**@'         shift, and enter state 6
	'/*@'          reduce using rule 5
	'false'        reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'true'         reduce using rule 5
	L_integ        reduce using rule 5
	L_VarIdent     reduce using rule 5

	Qualifier      goto state 4
	ListQualifier  goto state 22

State 5

	Program -> ListQualifier . Term                     (rule 3)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 10
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 6

	Qualifier -> '/**@' . 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	'qualif'       shift, and enter state 7


State 7

	Qualifier -> '/**@' 'qualif' . VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 41

State 8

	Term -> Integer .                                   (rule 10)
	FuncAppArg -> Integer .                             (rule 69)

	'*'            reduce using rule 69
	'+'            reduce using rule 69
	'-'            reduce using rule 69
	';'            reduce using rule 10
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 9

	Term -> VarIdent .                                  (rule 12)
	Term -> VarIdent . '(' ListFuncAppArg ')'           (rule 13)
	FuncAppArg -> VarIdent .                            (rule 70)

	'('            shift, and enter state 40
	'*'            reduce using rule 70
	'+'            reduce using rule 70
	'-'            reduce using rule 70
	';'            reduce using rule 12
	'<'            reduce using rule 70
	'<='           reduce using rule 70
	'=='           reduce using rule 70
	'>'            reduce using rule 70
	'>='           reduce using rule 70
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 10

	Program -> ListQualifier Term .                     (rule 3)

	%eof           reduce using rule 3


State 11

	Term -> ConstBool .                                 (rule 11)
	FuncAppArg -> ConstBool .                           (rule 68)

	'*'            reduce using rule 68
	'+'            reduce using rule 68
	'-'            reduce using rule 68
	';'            reduce using rule 11
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 12

	Decl -> Annotation . 'let' 'rec' VarIdent '=' Term ';'    (rule 21)
	Decl -> Annotation . 'let' VarIdent '=' Term ';'    (rule 22)

	'let'          shift, and enter state 39


State 13

	Term -> Decl . Term                                 (rule 15)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 38
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 14

	Term -> FuncAppArg . IntOp FuncAppArg               (rule 17)

	'*'            shift, and enter state 30
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'<'            shift, and enter state 33
	'<='           shift, and enter state 34
	'=='           shift, and enter state 35
	'>'            shift, and enter state 36
	'>='           shift, and enter state 37

	IntOp          goto state 29

State 15

	Term -> '(' . ListFunArgName ')' '=>' '{' Term '}'    (rule 16)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 26
	FunArgName     goto state 27
	ListFunArgName goto state 28

State 16

	Annotation -> '/*@' . 'val' VarIdent ':' RType '*/'    (rule 20)

	'val'          shift, and enter state 25


State 17

	ConstBool -> 'false' .                              (rule 19)

	'&&'           reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	','            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'<'            reduce using rule 19
	'<='           reduce using rule 19
	'=='           reduce using rule 19
	'>'            reduce using rule 19
	'>='           reduce using rule 19
	']'            reduce using rule 19
	'||'           reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 18

	Term -> 'if' . '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term '}'    (rule 14)

	'('            shift, and enter state 24


State 19

	Decl -> 'let' . VarIdent '=' Term ';'               (rule 23)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 23

State 20

	ConstBool -> 'true' .                               (rule 18)

	'&&'           reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	']'            reduce using rule 18
	'||'           reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 21

	VarIdent -> L_VarIdent .                            (rule 2)

	'&&'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'*/'           reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'='            reduce using rule 2
	'=='           reduce using rule 2
	'=>'           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	']'            reduce using rule 2
	'|'            reduce using rule 2
	'||'           reduce using rule 2
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 22

	ListQualifier -> Qualifier ListQualifier .          (rule 6)

	'('            reduce using rule 6
	'/*@'          reduce using rule 6
	'false'        reduce using rule 6
	'if'           reduce using rule 6
	'let'          reduce using rule 6
	'true'         reduce using rule 6
	L_integ        reduce using rule 6
	L_VarIdent     reduce using rule 6


State 23

	Decl -> 'let' VarIdent . '=' Term ';'               (rule 23)

	'='            shift, and enter state 55


State 24

	Term -> 'if' '(' . FuncAppArg ')' '{' Term '}' 'else' '{' Term '}'    (rule 14)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 43
	VarIdent       goto state 44
	ConstBool      goto state 45
	FuncAppArg     goto state 54

State 25

	Annotation -> '/*@' 'val' . VarIdent ':' RType '*/'    (rule 20)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 53

State 26

	FunArgName -> VarIdent .                            (rule 65)

	')'            reduce using rule 65
	','            reduce using rule 65


State 27

	ListFunArgName -> FunArgName .                      (rule 66)
	ListFunArgName -> FunArgName . ',' ListFunArgName    (rule 67)

	')'            reduce using rule 66
	','            shift, and enter state 52


State 28

	Term -> '(' ListFunArgName . ')' '=>' '{' Term '}'    (rule 16)

	')'            shift, and enter state 51


State 29

	Term -> FuncAppArg IntOp . FuncAppArg               (rule 17)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 43
	VarIdent       goto state 44
	ConstBool      goto state 45
	FuncAppArg     goto state 50

State 30

	IntOp -> '*' .                                      (rule 26)

	'false'        reduce using rule 26
	'true'         reduce using rule 26
	L_integ        reduce using rule 26
	L_VarIdent     reduce using rule 26


State 31

	IntOp -> '+' .                                      (rule 24)

	'false'        reduce using rule 24
	'true'         reduce using rule 24
	L_integ        reduce using rule 24
	L_VarIdent     reduce using rule 24


State 32

	IntOp -> '-' .                                      (rule 25)

	'false'        reduce using rule 25
	'true'         reduce using rule 25
	L_integ        reduce using rule 25
	L_VarIdent     reduce using rule 25


State 33

	IntOp -> '<' .                                      (rule 28)

	'false'        reduce using rule 28
	'true'         reduce using rule 28
	L_integ        reduce using rule 28
	L_VarIdent     reduce using rule 28


State 34

	IntOp -> '<=' .                                     (rule 29)

	'false'        reduce using rule 29
	'true'         reduce using rule 29
	L_integ        reduce using rule 29
	L_VarIdent     reduce using rule 29


State 35

	IntOp -> '==' .                                     (rule 27)

	'false'        reduce using rule 27
	'true'         reduce using rule 27
	L_integ        reduce using rule 27
	L_VarIdent     reduce using rule 27


State 36

	IntOp -> '>' .                                      (rule 30)

	'false'        reduce using rule 30
	'true'         reduce using rule 30
	L_integ        reduce using rule 30
	L_VarIdent     reduce using rule 30


State 37

	IntOp -> '>=' .                                     (rule 31)

	'false'        reduce using rule 31
	'true'         reduce using rule 31
	L_integ        reduce using rule 31
	L_VarIdent     reduce using rule 31


State 38

	Term -> Decl Term .                                 (rule 15)

	';'            reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 39

	Decl -> Annotation 'let' . 'rec' VarIdent '=' Term ';'    (rule 21)
	Decl -> Annotation 'let' . VarIdent '=' Term ';'    (rule 22)

	'rec'          shift, and enter state 49
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 48

State 40

	Term -> VarIdent '(' . ListFuncAppArg ')'           (rule 13)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 43
	VarIdent       goto state 44
	ConstBool      goto state 45
	FuncAppArg     goto state 46
	ListFuncAppArg goto state 47

State 41

	Qualifier -> '/**@' 'qualif' VarIdent . '(' ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	'('            shift, and enter state 42


State 42

	Qualifier -> '/**@' 'qualif' VarIdent '(' . ListQualifierArg ')' ':' '(' Pred ')' '*/'    (rule 4)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 65
	QualifierArg   goto state 66
	ListQualifierArggoto state 67

State 43

	FuncAppArg -> Integer .                             (rule 69)

	')'            reduce using rule 69
	','            reduce using rule 69
	';'            reduce using rule 69
	'}'            reduce using rule 69
	%eof           reduce using rule 69


State 44

	FuncAppArg -> VarIdent .                            (rule 70)

	')'            reduce using rule 70
	','            reduce using rule 70
	';'            reduce using rule 70
	'}'            reduce using rule 70
	%eof           reduce using rule 70


State 45

	FuncAppArg -> ConstBool .                           (rule 68)

	')'            reduce using rule 68
	','            reduce using rule 68
	';'            reduce using rule 68
	'}'            reduce using rule 68
	%eof           reduce using rule 68


State 46

	ListFuncAppArg -> FuncAppArg .                      (rule 71)
	ListFuncAppArg -> FuncAppArg . ',' ListFuncAppArg    (rule 72)

	')'            reduce using rule 71
	','            shift, and enter state 64


State 47

	Term -> VarIdent '(' ListFuncAppArg . ')'           (rule 13)

	')'            shift, and enter state 63


State 48

	Decl -> Annotation 'let' VarIdent . '=' Term ';'    (rule 22)

	'='            shift, and enter state 62


State 49

	Decl -> Annotation 'let' 'rec' . VarIdent '=' Term ';'    (rule 21)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 61

State 50

	Term -> FuncAppArg IntOp FuncAppArg .               (rule 17)

	';'            reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 51

	Term -> '(' ListFunArgName ')' . '=>' '{' Term '}'    (rule 16)

	'=>'           shift, and enter state 60


State 52

	ListFunArgName -> FunArgName ',' . ListFunArgName    (rule 67)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 26
	FunArgName     goto state 27
	ListFunArgName goto state 59

State 53

	Annotation -> '/*@' 'val' VarIdent . ':' RType '*/'    (rule 20)

	':'            shift, and enter state 58


State 54

	Term -> 'if' '(' FuncAppArg . ')' '{' Term '}' 'else' '{' Term '}'    (rule 14)

	')'            shift, and enter state 57


State 55

	Decl -> 'let' VarIdent '=' . Term ';'               (rule 23)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 56
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 56

	Decl -> 'let' VarIdent '=' Term . ';'               (rule 23)

	';'            shift, and enter state 88


State 57

	Term -> 'if' '(' FuncAppArg ')' . '{' Term '}' 'else' '{' Term '}'    (rule 14)

	'{'            shift, and enter state 87


State 58

	Annotation -> '/*@' 'val' VarIdent ':' . RType '*/'    (rule 20)

	'\''           shift, and enter state 82
	'('            shift, and enter state 83
	'_'            shift, and enter state 84
	'bool'         shift, and enter state 85
	'int'          shift, and enter state 86
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 75
	RType          goto state 76
	RType1         goto state 77
	RType2         goto state 78
	RType3         goto state 79
	FuncArg        goto state 80
	BaseType       goto state 81

State 59

	ListFunArgName -> FunArgName ',' ListFunArgName .    (rule 67)

	')'            reduce using rule 67


State 60

	Term -> '(' ListFunArgName ')' '=>' . '{' Term '}'    (rule 16)

	'{'            shift, and enter state 74


State 61

	Decl -> Annotation 'let' 'rec' VarIdent . '=' Term ';'    (rule 21)

	'='            shift, and enter state 73


State 62

	Decl -> Annotation 'let' VarIdent '=' . Term ';'    (rule 22)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 72
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 63

	Term -> VarIdent '(' ListFuncAppArg ')' .           (rule 13)

	';'            reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


State 64

	ListFuncAppArg -> FuncAppArg ',' . ListFuncAppArg    (rule 72)

	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 43
	VarIdent       goto state 44
	ConstBool      goto state 45
	FuncAppArg     goto state 46
	ListFuncAppArg goto state 71

State 65

	QualifierArg -> VarIdent . ':' BaseType             (rule 7)

	':'            shift, and enter state 70


State 66

	ListQualifierArg -> QualifierArg .                  (rule 8)
	ListQualifierArg -> QualifierArg . ',' ListQualifierArg    (rule 9)

	')'            reduce using rule 8
	','            shift, and enter state 69


State 67

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg . ')' ':' '(' Pred ')' '*/'    (rule 4)

	')'            shift, and enter state 68


State 68

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' . ':' '(' Pred ')' '*/'    (rule 4)

	':'            shift, and enter state 102


State 69

	ListQualifierArg -> QualifierArg ',' . ListQualifierArg    (rule 9)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 65
	QualifierArg   goto state 66
	ListQualifierArggoto state 101

State 70

	QualifierArg -> VarIdent ':' . BaseType             (rule 7)

	'bool'         shift, and enter state 85
	'int'          shift, and enter state 86

	BaseType       goto state 100

State 71

	ListFuncAppArg -> FuncAppArg ',' ListFuncAppArg .    (rule 72)

	')'            reduce using rule 72


State 72

	Decl -> Annotation 'let' VarIdent '=' Term . ';'    (rule 22)

	';'            shift, and enter state 99


State 73

	Decl -> Annotation 'let' 'rec' VarIdent '=' . Term ';'    (rule 21)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 98
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 74

	Term -> '(' ListFunArgName ')' '=>' '{' . Term '}'    (rule 16)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 97
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 75

	FuncArg -> VarIdent . ':' RType                     (rule 41)

	':'            shift, and enter state 96


State 76

	Annotation -> '/*@' 'val' VarIdent ':' RType . '*/'    (rule 20)

	'*/'           shift, and enter state 95


State 77

	RType -> RType1 .                                   (rule 37)

	')'            reduce using rule 37
	'*/'           reduce using rule 37
	'=>'           reduce using rule 37


State 78

	RType1 -> RType2 .                                  (rule 38)

	')'            reduce using rule 38
	'*/'           reduce using rule 38
	'=>'           reduce using rule 38


State 79

	RType2 -> RType3 .                                  (rule 39)

	')'            reduce using rule 39
	'*/'           reduce using rule 39
	'=>'           reduce using rule 39


State 80

	RType -> FuncArg . '=>' RType                       (rule 32)

	'=>'           shift, and enter state 94


State 81

	RType -> BaseType . '[' VarIdent '|' Pred ']'       (rule 33)
	RType -> BaseType . '[' '?' ']'                     (rule 34)
	RType -> BaseType .                                 (rule 36)

	')'            reduce using rule 36
	'*/'           reduce using rule 36
	'=>'           reduce using rule 36
	'['            shift, and enter state 93


State 82

	RType -> '\'' . VarIdent                            (rule 35)

	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 92

State 83

	RType3 -> '(' . RType ')'                           (rule 40)

	'\''           shift, and enter state 82
	'('            shift, and enter state 83
	'_'            shift, and enter state 84
	'bool'         shift, and enter state 85
	'int'          shift, and enter state 86
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 75
	RType          goto state 91
	RType1         goto state 77
	RType2         goto state 78
	RType3         goto state 79
	FuncArg        goto state 80
	BaseType       goto state 81

State 84

	FuncArg -> '_' . ':' RType                          (rule 42)

	':'            shift, and enter state 90


State 85

	BaseType -> 'bool' .                                (rule 64)

	')'            reduce using rule 64
	'*/'           reduce using rule 64
	','            reduce using rule 64
	'=>'           reduce using rule 64
	'['            reduce using rule 64


State 86

	BaseType -> 'int' .                                 (rule 63)

	')'            reduce using rule 63
	'*/'           reduce using rule 63
	','            reduce using rule 63
	'=>'           reduce using rule 63
	'['            reduce using rule 63


State 87

	Term -> 'if' '(' FuncAppArg ')' '{' . Term '}' 'else' '{' Term '}'    (rule 14)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 89
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 88

	Decl -> 'let' VarIdent '=' Term ';' .               (rule 23)

	'('            reduce using rule 23
	'/*@'          reduce using rule 23
	'false'        reduce using rule 23
	'if'           reduce using rule 23
	'let'          reduce using rule 23
	'true'         reduce using rule 23
	L_integ        reduce using rule 23
	L_VarIdent     reduce using rule 23


State 89

	Term -> 'if' '(' FuncAppArg ')' '{' Term . '}' 'else' '{' Term '}'    (rule 14)

	'}'            shift, and enter state 112


State 90

	FuncArg -> '_' ':' . RType                          (rule 42)

	'\''           shift, and enter state 82
	'('            shift, and enter state 83
	'_'            shift, and enter state 84
	'bool'         shift, and enter state 85
	'int'          shift, and enter state 86
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 75
	RType          goto state 111
	RType1         goto state 77
	RType2         goto state 78
	RType3         goto state 79
	FuncArg        goto state 80
	BaseType       goto state 81

State 91

	RType3 -> '(' RType . ')'                           (rule 40)

	')'            shift, and enter state 110


State 92

	RType -> '\'' VarIdent .                            (rule 35)

	')'            reduce using rule 35
	'*/'           reduce using rule 35
	'=>'           reduce using rule 35


State 93

	RType -> BaseType '[' . VarIdent '|' Pred ']'       (rule 33)
	RType -> BaseType '[' . '?' ']'                     (rule 34)

	'?'            shift, and enter state 109
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 108

State 94

	RType -> FuncArg '=>' . RType                       (rule 32)

	'\''           shift, and enter state 82
	'('            shift, and enter state 83
	'_'            shift, and enter state 84
	'bool'         shift, and enter state 85
	'int'          shift, and enter state 86
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 75
	RType          goto state 107
	RType1         goto state 77
	RType2         goto state 78
	RType3         goto state 79
	FuncArg        goto state 80
	BaseType       goto state 81

State 95

	Annotation -> '/*@' 'val' VarIdent ':' RType '*/' .    (rule 20)

	'let'          reduce using rule 20


State 96

	FuncArg -> VarIdent ':' . RType                     (rule 41)

	'\''           shift, and enter state 82
	'('            shift, and enter state 83
	'_'            shift, and enter state 84
	'bool'         shift, and enter state 85
	'int'          shift, and enter state 86
	L_VarIdent     shift, and enter state 21

	VarIdent       goto state 75
	RType          goto state 106
	RType1         goto state 77
	RType2         goto state 78
	RType3         goto state 79
	FuncArg        goto state 80
	BaseType       goto state 81

State 97

	Term -> '(' ListFunArgName ')' '=>' '{' Term . '}'    (rule 16)

	'}'            shift, and enter state 105


State 98

	Decl -> Annotation 'let' 'rec' VarIdent '=' Term . ';'    (rule 21)

	';'            shift, and enter state 104


State 99

	Decl -> Annotation 'let' VarIdent '=' Term ';' .    (rule 22)

	'('            reduce using rule 22
	'/*@'          reduce using rule 22
	'false'        reduce using rule 22
	'if'           reduce using rule 22
	'let'          reduce using rule 22
	'true'         reduce using rule 22
	L_integ        reduce using rule 22
	L_VarIdent     reduce using rule 22


State 100

	QualifierArg -> VarIdent ':' BaseType .             (rule 7)

	')'            reduce using rule 7
	','            reduce using rule 7


State 101

	ListQualifierArg -> QualifierArg ',' ListQualifierArg .    (rule 9)

	')'            reduce using rule 9


State 102

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' . '(' Pred ')' '*/'    (rule 4)

	'('            shift, and enter state 103


State 103

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' . Pred ')' '*/'    (rule 4)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred1          goto state 120
	Pred2          goto state 121
	Pred3          goto state 122
	Pred4          goto state 123
	Pred5          goto state 124
	Pred           goto state 125

State 104

	Decl -> Annotation 'let' 'rec' VarIdent '=' Term ';' .    (rule 21)

	'('            reduce using rule 21
	'/*@'          reduce using rule 21
	'false'        reduce using rule 21
	'if'           reduce using rule 21
	'let'          reduce using rule 21
	'true'         reduce using rule 21
	L_integ        reduce using rule 21
	L_VarIdent     reduce using rule 21


State 105

	Term -> '(' ListFunArgName ')' '=>' '{' Term '}' .    (rule 16)

	';'            reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 106

	FuncArg -> VarIdent ':' RType .                     (rule 41)

	'=>'           reduce using rule 41


State 107

	RType -> FuncArg '=>' RType .                       (rule 32)

	')'            reduce using rule 32
	'*/'           reduce using rule 32
	'=>'           reduce using rule 32


State 108

	RType -> BaseType '[' VarIdent . '|' Pred ']'       (rule 33)

	'|'            shift, and enter state 115


State 109

	RType -> BaseType '[' '?' . ']'                     (rule 34)

	']'            shift, and enter state 114


State 110

	RType3 -> '(' RType ')' .                           (rule 40)

	')'            reduce using rule 40
	'*/'           reduce using rule 40
	'=>'           reduce using rule 40


State 111

	FuncArg -> '_' ':' RType .                          (rule 42)

	'=>'           reduce using rule 42


State 112

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' . 'else' '{' Term '}'    (rule 14)

	'else'         shift, and enter state 113


State 113

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' . '{' Term '}'    (rule 14)

	'{'            shift, and enter state 140


State 114

	RType -> BaseType '[' '?' ']' .                     (rule 34)

	')'            reduce using rule 34
	'*/'           reduce using rule 34
	'=>'           reduce using rule 34


State 115

	RType -> BaseType '[' VarIdent '|' . Pred ']'       (rule 33)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred1          goto state 120
	Pred2          goto state 121
	Pred3          goto state 122
	Pred4          goto state 123
	Pred5          goto state 124
	Pred           goto state 139

State 116

	Pred6 -> Integer .                                  (rule 45)

	'&&'           reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	']'            reduce using rule 45
	'||'           reduce using rule 45


State 117

	Pred6 -> VarIdent .                                 (rule 43)

	'&&'           reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	']'            reduce using rule 43
	'||'           reduce using rule 43


State 118

	Pred6 -> ConstBool .                                (rule 44)

	'&&'           reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	']'            reduce using rule 44
	'||'           reduce using rule 44


State 119

	Pred5 -> Pred6 .                                    (rule 61)

	'&&'           reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	'+'            reduce using rule 61
	'-'            reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	']'            reduce using rule 61
	'||'           reduce using rule 61


State 120

	Pred1 -> Pred1 . '||' Pred2                         (rule 47)
	Pred -> Pred1 .                                     (rule 62)

	')'            reduce using rule 62
	']'            reduce using rule 62
	'||'           shift, and enter state 138


State 121

	Pred1 -> Pred2 .                                    (rule 48)
	Pred2 -> Pred2 . '&&' Pred3                         (rule 49)

	'&&'           shift, and enter state 137
	')'            reduce using rule 48
	']'            reduce using rule 48
	'||'           reduce using rule 48


State 122

	Pred2 -> Pred3 .                                    (rule 50)
	Pred3 -> Pred3 . '==' Pred4                         (rule 51)

	'&&'           reduce using rule 50
	')'            reduce using rule 50
	'=='           shift, and enter state 136
	']'            reduce using rule 50
	'||'           reduce using rule 50


State 123

	Pred3 -> Pred4 .                                    (rule 52)
	Pred4 -> Pred4 . '<' Pred5                          (rule 53)
	Pred4 -> Pred4 . '<=' Pred5                         (rule 54)
	Pred4 -> Pred4 . '>' Pred5                          (rule 55)
	Pred4 -> Pred4 . '>=' Pred5                         (rule 56)

	'&&'           reduce using rule 52
	')'            reduce using rule 52
	'<'            shift, and enter state 132
	'<='           shift, and enter state 133
	'=='           reduce using rule 52
	'>'            shift, and enter state 134
	'>='           shift, and enter state 135
	']'            reduce using rule 52
	'||'           reduce using rule 52


State 124

	Pred4 -> Pred5 .                                    (rule 57)
	Pred5 -> Pred5 . '+' Pred6                          (rule 58)
	Pred5 -> Pred5 . '-' Pred6                          (rule 59)
	Pred5 -> Pred5 . '*' Pred6                          (rule 60)

	'&&'           reduce using rule 57
	')'            reduce using rule 57
	'*'            shift, and enter state 129
	'+'            shift, and enter state 130
	'-'            shift, and enter state 131
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'=='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	']'            reduce using rule 57
	'||'           reduce using rule 57


State 125

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred . ')' '*/'    (rule 4)

	')'            shift, and enter state 128


State 126

	Pred6 -> '(' . Pred ')'                             (rule 46)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred1          goto state 120
	Pred2          goto state 121
	Pred3          goto state 122
	Pred4          goto state 123
	Pred5          goto state 124
	Pred           goto state 127

State 127

	Pred6 -> '(' Pred . ')'                             (rule 46)

	')'            shift, and enter state 154


State 128

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' . '*/'    (rule 4)

	'*/'           shift, and enter state 153


State 129

	Pred5 -> Pred5 '*' . Pred6                          (rule 60)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 152

State 130

	Pred5 -> Pred5 '+' . Pred6                          (rule 58)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 151

State 131

	Pred5 -> Pred5 '-' . Pred6                          (rule 59)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 150

State 132

	Pred4 -> Pred4 '<' . Pred5                          (rule 53)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred5          goto state 149

State 133

	Pred4 -> Pred4 '<=' . Pred5                         (rule 54)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred5          goto state 148

State 134

	Pred4 -> Pred4 '>' . Pred5                          (rule 55)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred5          goto state 147

State 135

	Pred4 -> Pred4 '>=' . Pred5                         (rule 56)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred5          goto state 146

State 136

	Pred3 -> Pred3 '==' . Pred4                         (rule 51)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred4          goto state 145
	Pred5          goto state 124

State 137

	Pred2 -> Pred2 '&&' . Pred3                         (rule 49)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred3          goto state 144
	Pred4          goto state 123
	Pred5          goto state 124

State 138

	Pred1 -> Pred1 '||' . Pred2                         (rule 47)

	'('            shift, and enter state 126
	'false'        shift, and enter state 17
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 116
	VarIdent       goto state 117
	ConstBool      goto state 118
	Pred6          goto state 119
	Pred2          goto state 143
	Pred3          goto state 122
	Pred4          goto state 123
	Pred5          goto state 124

State 139

	RType -> BaseType '[' VarIdent '|' Pred . ']'       (rule 33)

	']'            shift, and enter state 142


State 140

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' . Term '}'    (rule 14)

	'('            shift, and enter state 15
	'/*@'          shift, and enter state 16
	'false'        shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2
	L_VarIdent     shift, and enter state 21

	Integer        goto state 8
	VarIdent       goto state 9
	Term           goto state 141
	ConstBool      goto state 11
	Annotation     goto state 12
	Decl           goto state 13
	FuncAppArg     goto state 14

State 141

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term . '}'    (rule 14)

	'}'            shift, and enter state 155


State 142

	RType -> BaseType '[' VarIdent '|' Pred ']' .       (rule 33)

	')'            reduce using rule 33
	'*/'           reduce using rule 33
	'=>'           reduce using rule 33


State 143

	Pred1 -> Pred1 '||' Pred2 .                         (rule 47)
	Pred2 -> Pred2 . '&&' Pred3                         (rule 49)

	'&&'           shift, and enter state 137
	')'            reduce using rule 47
	']'            reduce using rule 47
	'||'           reduce using rule 47


State 144

	Pred2 -> Pred2 '&&' Pred3 .                         (rule 49)
	Pred3 -> Pred3 . '==' Pred4                         (rule 51)

	'&&'           reduce using rule 49
	')'            reduce using rule 49
	'=='           shift, and enter state 136
	']'            reduce using rule 49
	'||'           reduce using rule 49


State 145

	Pred3 -> Pred3 '==' Pred4 .                         (rule 51)
	Pred4 -> Pred4 . '<' Pred5                          (rule 53)
	Pred4 -> Pred4 . '<=' Pred5                         (rule 54)
	Pred4 -> Pred4 . '>' Pred5                          (rule 55)
	Pred4 -> Pred4 . '>=' Pred5                         (rule 56)

	'&&'           reduce using rule 51
	')'            reduce using rule 51
	'<'            shift, and enter state 132
	'<='           shift, and enter state 133
	'=='           reduce using rule 51
	'>'            shift, and enter state 134
	'>='           shift, and enter state 135
	']'            reduce using rule 51
	'||'           reduce using rule 51


State 146

	Pred4 -> Pred4 '>=' Pred5 .                         (rule 56)
	Pred5 -> Pred5 . '+' Pred6                          (rule 58)
	Pred5 -> Pred5 . '-' Pred6                          (rule 59)
	Pred5 -> Pred5 . '*' Pred6                          (rule 60)

	'&&'           reduce using rule 56
	')'            reduce using rule 56
	'*'            shift, and enter state 129
	'+'            shift, and enter state 130
	'-'            shift, and enter state 131
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	']'            reduce using rule 56
	'||'           reduce using rule 56


State 147

	Pred4 -> Pred4 '>' Pred5 .                          (rule 55)
	Pred5 -> Pred5 . '+' Pred6                          (rule 58)
	Pred5 -> Pred5 . '-' Pred6                          (rule 59)
	Pred5 -> Pred5 . '*' Pred6                          (rule 60)

	'&&'           reduce using rule 55
	')'            reduce using rule 55
	'*'            shift, and enter state 129
	'+'            shift, and enter state 130
	'-'            shift, and enter state 131
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	']'            reduce using rule 55
	'||'           reduce using rule 55


State 148

	Pred4 -> Pred4 '<=' Pred5 .                         (rule 54)
	Pred5 -> Pred5 . '+' Pred6                          (rule 58)
	Pred5 -> Pred5 . '-' Pred6                          (rule 59)
	Pred5 -> Pred5 . '*' Pred6                          (rule 60)

	'&&'           reduce using rule 54
	')'            reduce using rule 54
	'*'            shift, and enter state 129
	'+'            shift, and enter state 130
	'-'            shift, and enter state 131
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	']'            reduce using rule 54
	'||'           reduce using rule 54


State 149

	Pred4 -> Pred4 '<' Pred5 .                          (rule 53)
	Pred5 -> Pred5 . '+' Pred6                          (rule 58)
	Pred5 -> Pred5 . '-' Pred6                          (rule 59)
	Pred5 -> Pred5 . '*' Pred6                          (rule 60)

	'&&'           reduce using rule 53
	')'            reduce using rule 53
	'*'            shift, and enter state 129
	'+'            shift, and enter state 130
	'-'            shift, and enter state 131
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	']'            reduce using rule 53
	'||'           reduce using rule 53


State 150

	Pred5 -> Pred5 '-' Pred6 .                          (rule 59)

	'&&'           reduce using rule 59
	')'            reduce using rule 59
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	']'            reduce using rule 59
	'||'           reduce using rule 59


State 151

	Pred5 -> Pred5 '+' Pred6 .                          (rule 58)

	'&&'           reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	'+'            reduce using rule 58
	'-'            reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	']'            reduce using rule 58
	'||'           reduce using rule 58


State 152

	Pred5 -> Pred5 '*' Pred6 .                          (rule 60)

	'&&'           reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	'+'            reduce using rule 60
	'-'            reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	']'            reduce using rule 60
	'||'           reduce using rule 60


State 153

	Qualifier -> '/**@' 'qualif' VarIdent '(' ListQualifierArg ')' ':' '(' Pred ')' '*/' .    (rule 4)

	'('            reduce using rule 4
	'/**@'         reduce using rule 4
	'/*@'          reduce using rule 4
	'false'        reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'true'         reduce using rule 4
	L_integ        reduce using rule 4
	L_VarIdent     reduce using rule 4


State 154

	Pred6 -> '(' Pred ')' .                             (rule 46)

	'&&'           reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	']'            reduce using rule 46
	'||'           reduce using rule 46


State 155

	Term -> 'if' '(' FuncAppArg ')' '{' Term '}' 'else' '{' Term '}' .    (rule 14)

	';'            reduce using rule 14
	'}'            reduce using rule 14
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 73
Number of terminals: 40
Number of non-terminals: 30
Number of states: 156
