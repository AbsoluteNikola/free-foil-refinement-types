-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Syntax.

module Language.Sprite.Syntax.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data Term
    = ConstInt Integer
    | Var VarIdent
    | Let Decl ScopedTerm
    | Fun VarIdent ScopedTerm
    | App Term Term
    | Op Term IntOp Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Annotation = Annotation VarIdent RType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PlainDecl = PlainDecl VarIdent Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Decl
    = AnnotatedDecl Annotation PlainDecl | UnAnnotatedDecl PlainDecl
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data IntOp = IntPlus | IntMinus | IntMultiply
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RType
    = TypeRefined BaseType VarIdent Pred
    | TypeRefinedBase BaseType
    | TypeFun FuncArg ScopedRType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ScopedRType = ScopedRType RType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FuncArg = UnNamedFuncArg RType | NamedFuncArg VarIdent RType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Pred
    = PVar VarIdent
    | PTrue
    | PFalse
    | PInt Integer
    | PEq Pred Pred
    | PLessThan Pred Pred
    | PLessOrEqThan Pred Pred
    | PPlus Pred Pred
    | PMinus Pred Pred
    | PMultiply Pred Pred
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Pattern = PatternVar VarIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ScopedTerm = ScopedTerm Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data BaseType = BaseTypeInt
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype VarIdent = VarIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

