-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Inner.

module Language.Sprite.Syntax.Inner.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data Program = Program [DataType] Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Term
    = ConstInt Integer
    | Boolean ConstBool
    | Var VarIdent
    | Constructor ConIdent
    | If Term Term Term
    | Let Pattern Term ScopedTerm
    | LetRec Term Pattern ScopedTerm ScopedTerm
    | Fun Pattern ScopedTerm
    | App Term Term
    | Ann Term Term
    | OpExpr Term Op Term
    | Switch Term [Term]
    | CaseAlt VarIdent Pattern ScopedTerm
    | TLam Pattern ScopedTerm
    | TApp Term Term
    | TypeRefined Term Pattern ScopedTerm
    | TypeFun Pattern Term ScopedTerm
    | TypeForall Pattern ScopedTerm
    | TypeData VarIdent TypeDataArgs Pattern ScopedTerm
    | HVar VarIdent [Term]
    | Measure VarIdent [Term]
    | Unknown
    | BaseTypeInt
    | BaseTypeBool
    | BaseTypeVar Term
    | BaseTypeTempVar VarIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ScopedTerm = ScopedTerm Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstBool = ConstTrue | ConstFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeDataArgs
    = NonEmptyTypeDataArgs [TypeDataArg] | EmptyTypeDataArgs
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeDataArg = TypeDataArg Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Op
    = EqOp
    | LessOrEqOp
    | LessOp
    | GreaterOrEqOp
    | GreaterOp
    | PlusOp
    | MinusOp
    | MultiplyOp
    | AndOp
    | OrOp
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Pattern
    = PatternVar VarIdent
    | PatternNoBinders
    | PatternSomeBinders VarIdent Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data DataType = DataType VarIdent [DataTypeCon]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data DataTypeCon = DataTypeCon VarIdent Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype VarIdent = VarIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype ConIdent = ConIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

