-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Lambda.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.Lambda.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVarIdent :: Language.Lambda.Syntax.Abs.VarIdent -> Result
transVarIdent x = case x of
  Language.Lambda.Syntax.Abs.VarIdent string -> failure x

transTerm :: Language.Lambda.Syntax.Abs.Term -> Result
transTerm x = case x of
  Language.Lambda.Syntax.Abs.ConstInt integer -> failure x
  Language.Lambda.Syntax.Abs.Var varident -> failure x
  Language.Lambda.Syntax.Abs.Let term pattern_ scopedterm -> failure x
  Language.Lambda.Syntax.Abs.Fun pattern_ scopedterm -> failure x
  Language.Lambda.Syntax.Abs.App term1 term2 -> failure x
  Language.Lambda.Syntax.Abs.Ann term1 term2 -> failure x
  Language.Lambda.Syntax.Abs.TypeRefined basetype pattern_ scopedterm -> failure x
  Language.Lambda.Syntax.Abs.TypeFun term pattern_ scopedterm -> failure x
  Language.Lambda.Syntax.Abs.PTrue -> failure x
  Language.Lambda.Syntax.Abs.PFalse -> failure x
  Language.Lambda.Syntax.Abs.PLessThan term1 term2 -> failure x

transPattern :: Language.Lambda.Syntax.Abs.Pattern -> Result
transPattern x = case x of
  Language.Lambda.Syntax.Abs.PatternVar varident -> failure x

transScopedTerm :: Language.Lambda.Syntax.Abs.ScopedTerm -> Result
transScopedTerm x = case x of
  Language.Lambda.Syntax.Abs.ScopedTerm term -> failure x

transBaseType :: Language.Lambda.Syntax.Abs.BaseType -> Result
transBaseType x = case x of
  Language.Lambda.Syntax.Abs.BaseTypeInt -> failure x

transKind :: Language.Lambda.Syntax.Abs.Kind -> Result
transKind x = case x of
  Language.Lambda.Syntax.Abs.KindBase -> failure x
  Language.Lambda.Syntax.Abs.KindStar -> failure x

transEnvironment :: Language.Lambda.Syntax.Abs.Environment -> Result
transEnvironment x = case x of
  Language.Lambda.Syntax.Abs.EnvironmentEmpty -> failure x
  Language.Lambda.Syntax.Abs.EnvironmentNonEmpty varbindings -> failure x

transVarBinding :: Language.Lambda.Syntax.Abs.VarBinding -> Result
transVarBinding x = case x of
  Language.Lambda.Syntax.Abs.VarBinding varident term -> failure x
