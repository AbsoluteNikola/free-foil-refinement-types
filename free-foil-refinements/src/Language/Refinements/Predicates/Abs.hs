-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Predicates.

module Language.Refinements.Predicates.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data Pred
    = HVar Id [Pred]
    | MeasureCall Id [Pred]
    | ConstInt Integer
    | Boolean ConstBool
    | Var Id
    | OpExpr Pred Op Pred
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstBool = ConstTrue | ConstFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Op
    = EqOp
    | LessOrEqOp
    | LessOp
    | GreaterOrEqOp
    | GreaterOp
    | PlusOp
    | MinusOp
    | MultiplyOp
    | AndOp
    | OrOp
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Type
    = BoolType
    | IntType
    | VarType Id
    | DataType Id [DataTypeArg]
    | FunType Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data DataTypeArg = DataTypeArg Type
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Measure = Measure Id Type
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Qualifier = Qualifier Id [QualifierArg] Pred
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data QualifierArg = QualifierArg Id Type
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

