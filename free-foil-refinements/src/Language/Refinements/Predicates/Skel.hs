-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Refinements.Predicates.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.Refinements.Predicates.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Language.Refinements.Predicates.Abs.Id -> Result
transId x = case x of
  Language.Refinements.Predicates.Abs.Id string -> failure x

transPred :: Language.Refinements.Predicates.Abs.Pred -> Result
transPred x = case x of
  Language.Refinements.Predicates.Abs.HVar id preds -> failure x
  Language.Refinements.Predicates.Abs.MeasureCall id preds -> failure x
  Language.Refinements.Predicates.Abs.ConstInt integer -> failure x
  Language.Refinements.Predicates.Abs.Boolean constbool -> failure x
  Language.Refinements.Predicates.Abs.Var id -> failure x
  Language.Refinements.Predicates.Abs.OpExpr pred1 op pred2 -> failure x

transConstBool :: Language.Refinements.Predicates.Abs.ConstBool -> Result
transConstBool x = case x of
  Language.Refinements.Predicates.Abs.ConstTrue -> failure x
  Language.Refinements.Predicates.Abs.ConstFalse -> failure x

transOp :: Language.Refinements.Predicates.Abs.Op -> Result
transOp x = case x of
  Language.Refinements.Predicates.Abs.EqOp -> failure x
  Language.Refinements.Predicates.Abs.LessOrEqOp -> failure x
  Language.Refinements.Predicates.Abs.LessOp -> failure x
  Language.Refinements.Predicates.Abs.GreaterOrEqOp -> failure x
  Language.Refinements.Predicates.Abs.GreaterOp -> failure x
  Language.Refinements.Predicates.Abs.PlusOp -> failure x
  Language.Refinements.Predicates.Abs.MinusOp -> failure x
  Language.Refinements.Predicates.Abs.MultiplyOp -> failure x
  Language.Refinements.Predicates.Abs.AndOp -> failure x
  Language.Refinements.Predicates.Abs.OrOp -> failure x

transType :: Language.Refinements.Predicates.Abs.Type -> Result
transType x = case x of
  Language.Refinements.Predicates.Abs.BoolType -> failure x
  Language.Refinements.Predicates.Abs.IntType -> failure x
  Language.Refinements.Predicates.Abs.VarType id -> failure x
  Language.Refinements.Predicates.Abs.DataType id datatypeargs -> failure x
  Language.Refinements.Predicates.Abs.FunType type_1 type_2 -> failure x

transDataTypeArg :: Language.Refinements.Predicates.Abs.DataTypeArg -> Result
transDataTypeArg x = case x of
  Language.Refinements.Predicates.Abs.DataTypeArg type_ -> failure x

transMeasure :: Language.Refinements.Predicates.Abs.Measure -> Result
transMeasure x = case x of
  Language.Refinements.Predicates.Abs.Measure id type_ -> failure x

transQualifier :: Language.Refinements.Predicates.Abs.Qualifier -> Result
transQualifier x = case x of
  Language.Refinements.Predicates.Abs.Qualifier id qualifierargs pred -> failure x

transQualifierArg :: Language.Refinements.Predicates.Abs.QualifierArg -> Result
transQualifierArg x = case x of
  Language.Refinements.Predicates.Abs.QualifierArg id type_ -> failure x
